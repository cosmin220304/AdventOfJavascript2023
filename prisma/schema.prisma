// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    email         String    @unique
    emailVerified DateTime? @db.DateTime
    password      String? // if logged with google, no password
    name          String
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    role          RoleEnum? @default(USER)
    pairing       Pairing[]

    Account    Account[]
    Session    Session[]
    UserStatus UserStatus[]
    WishList   WishList[]
    ThankYou   ThankYou[]
}

enum RoleEnum {
    USER
    ADMIN
}

model UserStatus {
    id      String         @id @default(cuid())
    eventId String
    userId  String
    status  UserStatusEnum

    event Event @relation(fields: [eventId], references: [id])
    user  User  @relation(fields: [userId], references: [id])
}

enum UserStatusEnum {
    INVITED
    ACCEPTED
    DECLINED
}

model Event {
    id           String   @id @default(cuid())
    name         String
    date         DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    sendReminder Boolean? @default(false)

    UserStatus UserStatus[]
    WishList   WishList[]
    Pairing    Pairing[]
    ThankYou   ThankYou[]
}

model Pairing {
    id        String   @id @default(cuid())
    eventId   String
    santaId   String
    personId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?

    Event Event @relation(fields: [eventId], references: [id])
}

model WishList {
    id              String   @id @default(cuid())
    name            String
    url             String
    userId          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    order           Int
    eventId         String
    siteImage       String
    siteTitle       String
    siteDescription String

    Event Event @relation(fields: [eventId], references: [id])
    User  User  @relation(fields: [userId], references: [id])
}

model ThankYou {
    id        String   @id @default(cuid())
    eventId   String
    userId    String
    toUserId  String
    message   String
    createdAt DateTime @default(now())

    event Event @relation(fields: [eventId], references: [id])
    User  User  @relation(fields: [userId], references: [id])
}
